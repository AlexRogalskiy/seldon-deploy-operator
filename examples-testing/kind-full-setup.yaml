apiVersion: machinelearning.seldon.io/v1alpha1
kind: SeldonDeploy
metadata:
  name: seldondeploy-sample-kind-full
spec:
  replicaCount: 1
  image:
    image: docker.io/seldonio/seldon-deploy-server-ubi:1.0.1-dev
    pullPolicy: Always
  resources:
    limits:
      cpu: 500m
      memory: 350Mi
    requests:
      cpu: 100m
      memory: 200Mi
  serviceAccount:
    create: true
  gitops:
    argocd:
      enabled: false
  ingressGateway:
    seldonIngressService: "istio-ingressgateway"
    kfServingIngressService: "istio-ingressgateway"
    ingressNamespace: "istio-system"
  virtualService:
    create: true
    prefix: "/seldon-deploy/"
    gateways:
      - istio-system/seldon-gateway
  rbac:
    create: true
    clusterWide: true
    readNamespaces: true
  prometheus:
    seldon:
      url: "http://seldon-core-analytics-prometheus-seldon.seldon-system/api/v1/"
      namespaceMetricName: "kubernetes_namespace"
      serviceMetricName: "service"
      #leave below empty/commented for prom without token-based auth
      #basic auth can be handled by putting user:pass in url.
      jwtSecretName: ""
      jwtSecretKey: ""
    knative:
      #for knative monitoring would be http://prometheus-system-np.knative-monitoring.svc.cluster.local:8080/api/v1/
      #but seldon-core-analytics can be used to scrape autoscaler & activator if svcs annotated for scraping
      #annotations for analytics to scrape them are prometheus.io/scrape=true and prometheus.io/port=9090
      url: "http://seldon-core-analytics-prometheus-seldon.seldon-system/api/v1/"


  elasticsearch:
    url: "http://elasticsearch-master.seldon-logs.svc.cluster.local:9200"
    #leave below empty/commented for elastic without token-based auth
    #basic auth can be handled by putting user:pass in urls.elasticsearch
    jwtSecretName: ""
    jwtSecretKey: ""


  #only create request logger if you've not already installed it outside of helm (or first delete existing install)
  #if namespace.create is false then assumes namespace existing with a knative broker (kubectl get broker -n seldon-logs)
  requestLogger:
    create: true
    image: docker.io/seldonio/seldon-request-logger:1.5.1
    #increase logger replicas if there are high traffic volumes
    replicas: 1
    imagePullPolicy: IfNotPresent
    elasticsearch:
      host: "elasticsearch-master.seldon-logs.svc.cluster.local"
      port: "9200"
      protocol: "http"
      jwtSecretName: ""
      jwtSecretKey: ""
    namespace:
      create: false
      name: seldon-logs
    trigger:
      apiVersion: "eventing.knative.dev/v1"
      broker: "default"
    resources:
      limits:
        cpu: 600m
        memory: 500Mi
      requests:
        cpu: 100m
        memory: 200Mi

  openshiftMarketplace:
    cleanupClusterServiceVersions: false
    kubectlCleanupImage: docker.io/seldonio/kubectl:1.14.3
    seldonCore:
      subscription:
        create: false
        apiVersion: "operators.coreos.com/v1alpha1"
        channel: "stable"
        metricsPath: "/metrics"
        istioEnabled: true
        requestLoggerEndpoint: "http://broker-ingress.knative-eventing.svc.cluster.local/seldon-logs/default"
      istioGateway:
        create: false
        name: "seldon-gateway"
        namespace: "istio-system"
    prometheus:
      monitorSpecs:
        create: false
